
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path

# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import tkinter as tk
import cv2
from PIL import Image, ImageTk
import os
import settings
from datetime import datetime
from datetime import datetime, date


OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\20307975\Desktop\opencv_project\assets\frame0")

mycursor = settings.mydb.cursor()
dt = datetime.now()
time = datetime.now().isoformat(sep=" ", timespec="seconds")
day =dt.strftime('%A')
today = date.today()

def getStudent(id):
    mycursor.execute("SELECT * FROM students WHERE s_id= "+str(id))
    profile = None
    for row in mycursor:
        profile = row
    name = profile[1] if profile else "Unknown"
    return name

old_path  = os.path.dirname(os.path.realpath(__file__))
old_path = old_path.replace("\\","/")
print(old_path)
path = old_path+ "/dataset"
#recognizer = cv2.face.FisherFaceRecognizer_create()
#recognizer.read('C:/Users/20307975/Desktop/opencv_project/FaceRecognition/trainer/Fishertrainer.yml')
recognizer = cv2.face.LBPHFaceRecognizer_create()
recognizer.read('C:/Users/20307975/Desktop/opencv_project/FaceRecognition/trainer/LBPHtrainer.yml')
cascadePath = cv2.data.haarcascades +"haarcascade_frontalface_default.xml"
eye_cascade = cv2.CascadeClassifier(cv2.data.haarcascades +'haarcascade_eye.xml')
faceCascade = cv2.CascadeClassifier(cascadePath)

prototxt = 'C:/Users/20307975/Desktop/opencv_project/FaceRecognition/deploy.prototxt.txt'    
caffemodel='C:/Users/20307975/Desktop/opencv_project/FaceRecognition/res10_300x300_ssd_iter_140000.caffemodel'     
liveness_net =  cv2.dnn.readNetFromCaffe( prototxt, caffemodel)  

font = cv2.FONT_HERSHEY_SIMPLEX
id_name = ""
prev_id = 0
same_id_count =0
confidence=0

def get_course_id():
    global course
    course_id = "SELECT students.c_id  FROM students WHERE students.s_id = (%s)"
    mycursor.execute(course_id, (id_, ))
    course_rows = mycursor.fetchall()
    if course_rows:
        course = course_rows[0][0]
        print(course)

# Define a function for liveness detection
def liveness_detection(img, gray_face):
    # Get the dimensions of the face bounding box
    x, y, w, h = gray_face

    # Extract the face from the frame
    face_image = img[y:y+h, x:x+w]

    # Preprocess the face image for liveness detection
    blob = cv2.dnn.blobFromImage(face_image, 1, (300, 300), (104, 177, 123), False, False)

    # Pass the face image through the liveness detector model
    liveness_net.setInput(blob)
    detections = liveness_net.forward()

    # Check if the liveness score is greater than the threshold
    liveness_score = detections[0, 0, 0, 2]
    if liveness_score > 0.9970:#0.99939
        return True
        
    else:
        print(liveness_score)
        return False


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)


window = Tk()

window.geometry("1440x1024")
window.title("Facial recognition Attendance")
window.configure(bg = "#C5F1FF")

canvas = Canvas(
    window,
    bg = "#C5F1FF",
    height = 1024,
    width = 1440,
    bd = 0,
    highlightthickness = 0,
    relief = "ridge"
)

canvas.place(x = 0, y = 0)
canvas.create_rectangle(
    47.0,
    10.0,
    814.0,
    1015.0,
    fill="#F9F9F9",
    outline="")

canvas.create_rectangle(
    682.0,
    10.0,
    1430.0,
    1015.0,
    fill="#F9F9F9",
    outline="")

canvas.create_rectangle(
    82.0,
    29.0,
    786.0,
    993.0,
    fill="#76C5F2",
    outline="")

canvas.create_text(
    98.0,
    38.0,
    anchor="nw",
    text="Welcome Back",
    fill="#000000",
    font=("Inter", 96 * -1)
)

canvas.create_rectangle(
    779.0,
    29.0,
    1403.0,
    993.0,
    fill="#76C6F2",
    outline="")

canvas.create_rectangle(
    798.0,
    77.0,
    1368.0,
    944.0,
    fill="#FFFFFF",
    outline="")

canvas.create_text(
    948.0,
    197.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 96 * -1)
)
# create the canvas for displaying camera frames
camera_canvas = Canvas(
    canvas,
    bg="#C5F1FF",
    height=480,
    width=640,
    bd=0,
    highlightthickness=0,
    relief="ridge"
)
camera_canvas.place(x=120, y=275)

# initialize the camera
cam = cv2.VideoCapture(0)
def button1_clicked():
    canvas.itemconfigure(name_text, text="")
    if id_!=0:
        get_course_id()
    
        select_query = "SELECT module.m_id, module.modulename FROM module,attendance, day WHERE  module.c_id = attendance.c_id AND day.day_id = module.day_id AND day.`day` = (%s) AND module.c_id = (%s) AND attendance.m_id = module.m_id AND (%s) BETWEEN module.start_time AND module.end_time"
    
        mycursor.execute(select_query, (day, course, time))
        #mycursor.execute(select_query, (id, name))
        module = mycursor.fetchall()
        #print(selected_rows)
 

    
    canvas.itemconfigure(name_text, text="")
    #print("Same id count is: " + str(same_id_count))
    if same_id_count>3 and id_ != 0 :
        canvas.itemconfigure(name_text, text="Hello " + id_name)
        if module != []:
            module_id = str(module[0][0])
            module_name = module[0][1]
            canvas.itemconfigure(info_text, text="Clocked in For: " + module_name)
                # check if the table already contains the timestamp for today's date
            query = "SELECT * FROM attendance WHERE s_id = %s AND c_id = %s AND m_id = %s AND DATE(attendance_time) = %s"
            mycursor.execute(query, (id_, course, module_id, today))
            attendance_rows = mycursor.fetchall()
            if attendance_rows:
                canvas.itemconfigure(time_text, text="You have already clocked in")
            else:
                # get the current timestamp
                timestamp = datetime.now()
                # write an SQL query to insert the timestamp into the database
                query = "INSERT INTO attendance (s_id,c_id,m_id,attendance_time) VALUES (%s,%s,%s,%s)"

                # execute the SQL query with the timestamp value and variables as parameters
                mycursor.execute(query, (id_, course, module_id, timestamp))
                settings.mydb.commit()
                canvas.itemconfigure(time_text, text="Clocked in at: " + timestamp)

    
   
        else:
             canvas.itemconfigure(info_text, text="You dont have a lesson right now")
    else:
         canvas.itemconfigure(name_text, text="Not recognised")

    

# function to update the camera frames on the canvas
minW = 0.1*cam.get(3)
minH = 0.1*cam.get(4)

def update_camera():
    global id_name, prev_id, same_id_count, confidence,id_
    
    ret, img = cam.read()
    if ret:
        # convert the frame to grayscale
        gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

        # detect faces in the grayscale frame
        faces = faceCascade.detectMultiScale(
            gray,
            scaleFactor=1.3,
            minNeighbors=5,
            minSize=(int(minW), int(minH))
        )

        for (x,y,w,h) in faces:
            # extract the face ROI
            roi_gray = gray[y:y+h, x:x+w]
            roi_color = img[y:y+h, x:x+w]
            roi_gray = cv2.resize(roi_gray, (110, 110))
            # recognize the face using the FisherFaceRecognizer
            is_live = liveness_detection(img, (x, y, w, h))
            id_, confidence = recognizer.predict(roi_gray)
            #confidence = confidence/1200 #NEED TO CHANGE BACK TO 1300
            #confidence = (confidence)*100
            # if the recognizer is confident enough, update the displayed ID
            if confidence < 90:

                profile = getStudent(id_)
                
                if (profile != None):
                    if (prev_id == id_):
                        same_id_count += 1
                        if (same_id_count > 10):
                            same_id_count = 0
                            id_name = profile
                            
                            #print(id_name)
                            prev_id = id_
                    else:
                        prev_id = id_
                        id_name = profile
                        #print(id_name)
                        same_id_count = 0
            else:
                id_name = "unknown"
                #print(id_)
                id_ =0

            if is_live == False:
                id_name= "This is a spoof"
                id_ = 0
            # draw a rectangle around the face
            color = (255, 0, 0)  # blue
            stroke = 2
            end_cord_x = x + w
            end_cord_y = y + h
            cv2.rectangle(img, (x, y), (end_cord_x, end_cord_y), color, stroke)
            confidence = "  {0}%".format(round(confidence)) #100-80 =20%
            # draw the recognized ID and confidence level on the frame
            cv2.putText(img, str(id_name), (x+5,y-5), font, 1, (255,255,255), 2)
            cv2.putText(img, str(confidence), (x+5,y+h-5), font, 1, (255,255,0), 1)

        # convert the frame to a Tkinter-compatible image
        image = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)
        image = Image.fromarray(image)
        photo = ImageTk.PhotoImage(image)

        # update the canvas with the new photo
        camera_canvas.create_image(0, 0, anchor=tk.NW, image=photo)
        camera_canvas.photo = photo

    # schedule the next update
    camera_canvas.after(15, update_camera)
update_camera()
image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    248.0,
    166.0,
    image=image_image_1
)

image_image_1 = PhotoImage(
    file=relative_to_assets("image_1.png"))
image_1 = canvas.create_image(
    434.0,
    210.0,
    image=image_image_1
)

button_image_1 = PhotoImage(
    file=relative_to_assets("clock_in.png"))
button_1 = Button(
    image=button_image_1,
    borderwidth=0,
    highlightthickness=0,
    command=lambda: button1_clicked(),
    relief="flat"
)
name_text = canvas.create_text(
    800.0,
    197.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 40 * -1)
)
info_text = canvas.create_text(
    800.0,
    300.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 30 * -1)
)
time_text = canvas.create_text(
    800.0,
    500.0,
    anchor="nw",
    text="",
    fill="#000000",
    font=("Inter", 30 * -1)
)


button_1.place(
    x=172.0,
    y=786.0,
    width=485.0,
    height=196.0
)
k = cv2.waitKey(10) & 0xff # Press 'ESC' for exiting video
if k == 27:
    window.destroy()

window.resizable(False, False)
window.mainloop()
