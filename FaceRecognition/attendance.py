
# This file was generated by the Tkinter Designer by Parth Jadhav
# https://github.com/ParthJadhav/Tkinter-Designer


from pathlib import Path
import pandas as pd
# from tkinter import *
# Explicit imports to satisfy Flake8
from tkinter import Tk, Canvas, Entry, Text, Button, PhotoImage
import settings
from tkcalendar import DateEntry
import tkinter as tk
from tkinter import ttk
from tkinter import messagebox

OUTPUT_PATH = Path(__file__).parent
ASSETS_PATH = OUTPUT_PATH / Path(r"C:\Users\20307975\Desktop\opencv_project\assets\frame0")


def relative_to_assets(path: str) -> Path:
    return ASSETS_PATH / Path(path)

class AttendanceCheck:
    def __init__(self, master):
        self.master = master
        self.master.geometry("1440x1024")
        self.master.configure(bg = "#C5F1FF")

        self.canvas = Canvas(
            self.master,
            bg = "#C5F1FF",
            height = 1024,
            width = 1440,
            bd = 0,
            highlightthickness = 0,
            relief = "ridge"
        )

        self.canvas.place(x = 0, y = 0)
        self.canvas.create_rectangle(
            275.0,
            28.0,
            1214.0,
            996.0,
            fill="#76C6F2",
            outline="")

        self.image_image_1 = PhotoImage(
            file=relative_to_assets("image_1.png"))
        self.image_1 = self.canvas.create_image(
            461.0,
            126.0,
            image=self.image_image_1
        )

        self.canvas.create_text(
            654.0,
            88.0,
            anchor="nw",
            text="Register Check",
            fill="#000000",
            font=("Inter", 64 * -1)
        )

        self.entry_image_1 = PhotoImage(
            file=relative_to_assets("entry_1.png"))
        self.entry_bg_1 = self.canvas.create_image(
            862.5,
            302.5,
            image=self.entry_image_1
        )
        self.entry_1 = Text(
            bd=0,
            bg="#E5E3E3",
            fg="#000716",
             font=("Arial", 20), # set the font to Arial, size 20
            highlightthickness=0
        )
        self.entry_1 = DateEntry(self.canvas, bg='#E5E3E3', fg='#000716', date_pattern='yyyy-mm-dd')
        self.entry_1.place(
            x=702.0,
            y=261.0,
            width=321.0,
            height=81.0
        )

        self.entry_image_2 = PhotoImage(
            file=relative_to_assets("entry_2.png"))
        self.entry_bg_2 = self.canvas.create_image(
            862.5,
            453.5,
            image=self.entry_image_2
        )
        self.entry_2 = Text(
            bd=0,
            bg="#E5E4E4",
            fg="#000716",
             font=("Arial", 20), # set the font to Arial, size 20
            highlightthickness=0
        )
        self.entry_2.place(
            x=702.0,
            y=412.0,
            width=321.0,
            height=81.0
        )

        self.entry_image_3 = PhotoImage(
            file=relative_to_assets("entry_3.png"))
        self.entry_bg_3 = self.canvas.create_image(
            862.5,
            604.5,
            image=self.entry_image_3
        )
        self.entry_3 = Text(
            bd=0,
            bg="#E5E4E4",
            fg="#000716",
             font=("Arial", 20), # set the font to Arial, size 20
            highlightthickness=0
        )
        self.entry_3.place(
            x=702.0,
            y=563.0,
            width=321.0,
            height=81.0
        )

        self.button_image_1 = PhotoImage(#create images
            file=relative_to_assets("c_att.png"))
        self.button_1 = Button(
            image=self.button_image_1,
            borderwidth=0,
            highlightthickness=0,
            command= self.course_attendance,
            relief="flat"
        )
        self.button_1.place(
            x=308.0,
            y=772.0,
            width=279.0,
            height=181.0
        )

        self.button_image_2 = PhotoImage(
            file=relative_to_assets("d_att.png"))
        self.button_2 = Button(
            image=self.button_image_2,
            borderwidth=0,
            highlightthickness=0,
            command=self.date_attendance,
            relief="flat"
        )
        self.button_2.place(
            x=914.0,
            y=772.0,
            width=279.0,
            height=181.0
        )

        self.button_image_3 = PhotoImage(
            file=relative_to_assets("m_att.png"))
        self.button_3 = Button(
            image=self.button_image_3,
            borderwidth=0,
            highlightthickness=0,
            command=self.module_attendance,
            relief="flat"
        )
        self.button_3.place(
            x=611.0,
            y=772.0,
            width=279.0,
            height=181.0
        )

        self.canvas.create_text(
            394.0,
            274.0,
            anchor="nw",
            text="Date",
            fill="#000000",
            font=("Inter", 48 * -1)
        )

        self.canvas.create_text(
            394.0,
            425.0,
            anchor="nw",
            text="Course ID",
            fill="#000000",
            font=("Inter", 48 * -1)
        )

        self.canvas.create_text(
            394.0,
            576.0,
            anchor="nw",
            text="Module ID",
            fill="#000000",
            font=("Inter", 48 * -1)
        )
    def course_attendance(self):
        date= self.entry_1.get()
        c_id=self.entry_2.get("1.0", "end-1c")
        m_id = self.entry_3.get("1.0", "end-1c")
        conn = settings.mydb
        if c_id =="" or m_id =="":#check if data has been entered
            missing = tk.messagebox.showinfo("Field missing",f"Sorry feids are missing")
        else:
            print(date)
            #query to output attendance based on course
            query = "SELECT s.name," \
                    "COALESCE(ROUND(CAST(COUNT(a.att_id) AS FLOAT) / 10 * 100, 2), 0) AS attendance_percentage " \
                    "FROM students s " \
                    "LEFT JOIN attendance a ON s.s_id = a.s_id AND a.m_id = '{m_id}' " \
                    "WHERE s.c_id = '{c_id}' " \
                    "GROUP BY s.s_id".format(m_id=m_id, c_id=c_id)
        df = pd.read_sql_query(query, conn) 
        window = tk.Toplevel()
        window.title('Attendance Table')

# Create a tkinter Treeview object
        tree = ttk.Treeview(window)
        tree.pack()

# Define the columns for the Treeview
        tree['columns'] = list(df.columns)

# Format the columns
        for col in tree['columns']:
            tree.column(col, width=100)
            tree.heading(col, text=col)

# Insert the data rows into the Treeview
        for i, row in df.iterrows():
            tree.insert('', i, text=str(i+1), values=list(row))

# Start the tkinter event loop
         
        self.entry_2.delete("1.0", "end")
        self.entry_3.delete("1.0", "end")  
        window.mainloop()  
        
    def date_attendance(self):
        date= self.entry_1.get()
        c_id=self.entry_2.get("1.0", "end-1c")
        m_id = self.entry_3.get("1.0", "end-1c")
        conn = settings.mydb
        if c_id =="" or m_id =="" or date=="":#check if data has been entered
            missing = tk.messagebox.showinfo("Field missing",f"Sorry feids are missing")
        else:#query to output attendance based on date
            query = "SELECT s.name," \
        "COALESCE(ROUND(CAST(COUNT(a.att_id) AS FLOAT) / 10 * 100, 2), 0) AS attendance_percentage " \
        "FROM students s " \
        "LEFT JOIN attendance a ON s.s_id = a.s_id AND a.m_id = '{m_id}' " \
        "WHERE s.c_id = '{c_id}' " \
        "GROUP BY s.s_id".format(m_id=m_id, c_id=c_id)
        df = pd.read_sql_query(query, conn) 
        window = tk.Toplevel()
        window.title('Attendance Table')

# Create a tkinter Treeview object
        tree = ttk.Treeview(window)
        tree.pack()

# Define the columns for the Treeview 
        tree['columns'] = list(df.columns)

# Format the columns
        for col in tree['columns']:
            tree.column(col, width=100)
            tree.heading(col, text=col)

# Insert the data rows into the Treeview
        for i, row in df.iterrows():
            tree.insert('', i, text=str(i+1), values=list(row))

# Start the tkinter event loop
         
        
        self.entry_2.delete("1.0", "end") #delete data
        self.entry_3.delete("1.0", "end") 
        window.mainloop()  
    def module_attendance(self):
        print("module")
        date= self.entry_1.get()
        c_id=self.entry_2.get("1.0", "end-1c")
        m_id = self.entry_3.get("1.0", "end-1c")
        if c_id =="" or m_id=="" or date=="":#check if data has been entered
             missing = tk.messagebox.showinfo("Field missing",f"Sorry feids are missing")
        else:

            conn = settings.mydb
#query to output attendance based on module
            query = """SELECT s.name,a.attendance_time,
                CASE WHEN a.attendance_time IS NULL THEN 'Absent' ELSE 'Present' END AS attendance_status
                FROM students s
                LEFT JOIN (
                SELECT s_id, attendance_time
                FROM attendance a
                WHERE DATE(attendance_time) = '{date}' AND a.m_id ='{m_id}'
                ) a ON s.s_id = a.s_id
                WHERE s.c_id = '{c_id}';""".format(date=date, m_id=m_id, c_id=c_id)
            df = pd.read_sql_query(query, conn) 
            window = tk.Toplevel()
            window.title('Attendance Table')

            # Create a tkinter Treeview object
            tree = ttk.Treeview(window)
            tree.pack()

# Define the columns for the Treeview
            tree['columns'] = list(df.columns)

# Format the columns
            for col in tree['columns']:
                tree.column(col, width=100)
                tree.heading(col, text=col)

# Insert the data rows into the Treeview
            for i, row in df.iterrows():
                tree.insert('', i, text=str(i+1), values=list(row))

# Start the tkinter event loop
         
        
        self.entry_2.delete("1.0", "end")
        self.entry_3.delete("1.0", "end")
        window.mainloop()  
"""
root = Tk()
app = RegistrationCheck(root)
root.mainloop()
"""